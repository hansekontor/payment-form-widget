<div id="root"></div>
<script type="text/babel" data-presets="es2015,react">
    const CustomApp = window.styled.div`
        display: flex;
        align-items: center;
        justify-content: center;

        @keyframes spin {
        to { -webkit-transform: rotate(360deg); }
        }
        @-webkit-keyframes spin {
        to { -webkit-transform: rotate(360deg); }
    `;
    const FormBody = window.styled.div`
        width: 100%;
        max-width: 480px;
        position: relative;
        top: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 15px 5px; 5px;
    `;
    const Form = window.styled.form`
        background-color: #ffffff;
    `;
    const Item = window.styled.div`
        display: inline-flex;
        padding-bottom: 15px;
        width: 100%;
        gap: 5%;
    `;
    const Errors = window.styled(Item)`
        padding-bottm: 5px;
        gap: 5px;
        display: inline-flex;
    `;
    const Error = window.styled.div`
        color: red;
        line-height: 12px;
        font-weight: 600;
        font-family: "Inter-Medium", Helvetica;
    `;
    const Input = window.styled.input`
        height: 24px;
        width: 100%;
        min-width: 50px;
        background-color: #F6F6F6;
        border-radius: 8px;
        border: ${props => props.error ? 'solid 0.5px red' : 'none'};
        padding: 12px;
        
        &:focus {
            border: solid 0.5px black; 
        }
    `; 
    const ExpiryInputCtn = window.styled.div`
        height: 24px;
        background-color: #ffffff;
        display: inline-flex;
    `;
    const ExpiryInput = window.styled.input`
        height: 24px;
        border: 0;
        padding: 12px;
        border-radius: 8px;
        border: none;
        background-color: #F6F6F6;
    `;
    const Slash = window.styled.span`
        border: 0;
        line-height: 25px;
        padding: 0;
        margin: 0;
    `;
    const ExpiryItem = window.styled(Item)`
        width: 140px;
    `;
    const PrimaryButton = window.styled.button`
        all: unset;
        align-items: center;
        background-color: #000000;
        color: #ffffff;
        box-sizing: border-box;
        display: flex;
        justify-content: center;
        padding: 12px 16px;
        position: relative; 
        width: 100%;
        cursor: pointer;
    `;
    const Spin = window.styled.div`
        width: 50px;
        height: 50px;
        border: 3px solid #000000;
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
        -webkit-animation: spin 1s ease-in-out infinite;            
    `;
    const FormHeader = window.styled(Item)`
        justify-content: space-between;
    `;
    const HeaderText = window.styled.div`
        font-family: "Inter-Medium", Helvetica;
        font-size: 16px;
        font-weight: 500;
        width: fit-content;
    `;
    const Price = window.styled(HeaderText)``;
    const HiddenInput = window.styled(Input)`
        display: none;
    `;

    const App = () => {
        const amount = window.xprops?.amount || 3.33;
        const sandbox = window.xprops?.sandbox || true;
        //const {amount, sandbox} = useXProps();
        console.log("App amount", amount, "sandbox", sandbox);
        const [sectionToShow, setSectionToShow] = window.React.useState(0);
        const [values, setValues] = window.React.useState({
            first_name: "",
            last_name: "",
            address: "",
            country: "",
            state: "",
            city: "",
            zip: "",
            email: "",
            phone_no: "",
            card_no: "",
            expiration: "",
            cvv: "",
            focus: ""
        });
        const [errors, setErrors] = window.React.useState({});
        const [paymentAllowed, setPaymentAllowed] = window.React.useState(false);
        const [spin, setSpin] = window.React.useState(false);

        const validateCC = () => {
            console.log("validateCC called");
            let err = {
                first_name: false,
                last_name: false,
                card_no: false,
                cvv: false,
                expiration: false,
                zip: false,
            };

            let creditCard = window.valid.number(values.card_no);

            creditCard.expirationDate = window.valid.expirationDate(values.expiration);
            creditCard.cvv = window.valid.cvv(values.cvv);
            const fullName = values.first_name + " " + values.last_name;
            creditCard.cardholderName = window.valid.cardholderName(fullName);
            creditCard.postalCode = window.valid.postalCode(values.zip);
            

            // ZIP 
            if (values.zip === null || !values.zip.trim()) {
                err.zip = true;
            } else if (!creditCard.postalCode.isValid) {
                err.zip = true;
            }

            // CVV
            if (values.cvv === null || !values.cvv.trim()) {
                err.cvv = true;
            } else if (!creditCard.cvv.isValid) {
                err.cvv = true;
            } 

            // Expiration
            if (values.expiration === null || !values.expiration.trim()) {
                err.expiration = true;
            } else if (!creditCard.expirationDate.isValid) {
                err.expiration = true;
            }

            // Card Number
            if (values.card_no === null || !values.card_no.trim()) {
                err.card_no = "Card Number is missing";
            } else if (!creditCard.isValid) {
                err.card_no = true;
            } 

            // First Name
            if (values.first_name === null || !values.first_name.trim()) {
                err.first_name = "First name is missing";
            } else if (!creditCard.cardholderName.isValid) {
                err.first_name = true;                
            }

            // Last name
            if (values.last_name === null || !values.last_name.trim()) {
                err.last_name = true;  
            }
            
            let isValid = false;
            if (
                !(err.first_name ||
                err.last_name ||
                err.card_no ||
                err.cvv ||
                err.expiration ||
                err.zip)
            ) {
                isValid = true;
            }

            setErrors(err);

            return isValid;

        }
        const validateAddress = () => {
            let err = {
                address: false,
                country: false,
                state: false,
                city: false,
                email: false,
                phone_no: false,
            };

            const keys = Object.keys(err);
            keys.forEach(function(key) {
                if (values[key].length === 0) {
                    err[key] = true;
                }
            });

            let isValid = false;
            if (
                !(err.address ||
                err.country ||
                err.state || 
                err.city ||
                err.email ||
                err.phone_no)
            ) {
                isValid = true;
            }

            setErrors(err);

            return isValid;
        }
        
        const handleChange = (e) => {
            const {name, value} = e.target;
            setValues({
                ...values, 
                [name] : value
            });
        };
        const handleFocus = (e) => {
            setValues({ 
                ...values,
//                focus: (e.target.name === 'cardSecurityCode') ? 'cvc' : e.target.name
                focus: e.target.name
            });
        };
        const handleExpirationInput = (e) => {
            var inputChar = String.fromCharCode(event.keyCode);
            var code = event.keyCode;
            var allowedKeys = [8];
            if (allowedKeys.indexOf(code) !== -1) {
                return;
            }

            event.target.value = event.target.value.replace(
                /^([1-9]\/|[2-9])$/g, '0$1/'
            ).replace(
                /^(0[1-9]|1[0-2])$/g, '$1/'
            ).replace(
                /^([0-1])([3-9])$/g, '0$1/$2'
            ).replace(
                /^(0?[1-9]|1[0-2])([0-9]{2})$/g, '$1/$2'
            ).replace(
                /^([0]+)\/|[0]+$/g, '0'
            ).replace(
                /[^\d\/]|^[\/]*$/g, ''
            ).replace(
                /\/\//g, '/'
            );

        };
        const handleCardNoInput = (e) => {
            var inputChar = String.fromCharCode(event.keyCode);
            var code = event.code;
            var allowedKeys = [8];
            if (allowedKeys.indexOf(code) !== -1) {
                return;
            }

            event.target.value = event.target.value
                .replace(/\s/g, '')
                .split('')
                .map((number, index) => {
                    if (index % 4 === 3 && index > 0)
                        return number.concat(' ')
                    else
                        return number;
                }).join('');
        };
        
        const sleep = (ms) => {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
        const handleNext = async () => {
            console.log("handleNext called");
            const isValid = validateCC();
            if (isValid)
                setSectionToShow(1);
        }  
        const handlePrev = () => {
            setSectionToShow(0);
        }
        const handleToPayment = () => {
            const isValid = validateAddress();
            if (isValid)
                setPaymentAllowed(true);
        }
        
        return (
            <CustomApp>
                <>
                    {spin ? (
                        <Spin />
                    ) : (
                        <FormBody>                
                            <Form action={sandbox ? "/payment/sandbox" : "/payment/live" } method="post">
                                <FormHeader>
                                    <HeaderText>PAY WITH CARD {sandbox ? "- SANDBOX" : ""}</HeaderText>
                                    <Price>${amount}</Price>
                                </FormHeader>
                                <>  
                                    {sectionToShow === 0 ? (
                                        <>                                            
                                        <Item>
                                            <Input type="text"
                                                placeholder="1234 1234 1234 1234" 
                                                name="card_no"
                                                value={values.card_no}
                                                onChange={handleChange}
                                                onKeyUp={handleCardNoInput}
                                                error={errors.card_no}
                                            />
                                            </Item>      
                                            <Item>
                                                <Input type="text"
                                                    placeholder="MM / YY"
                                                    name="expiration"
                                                    //value={values.ccExpiration} errors in combination with onKeyUp+onChange
                                                    maxLength="5"
                                                    onChange={handleChange}
                                                    onKeyUp={handleExpirationInput}
                                                    error={errors.expiration}
                                                />                                        
                                                <Input type="number"
                                                    placeholder="CVV" 
                                                    name="cvv" 
                                                    value={values.cvv}
                                                    onChange={handleChange}
                                                    error={errors.cvv}
                                                />  
                                            </Item>
                                            <Item>
                                                <Input type="text" 
                                                    placeholder="First name" 
                                                    name="first_name" 
                                                    value={values.first_name} 
                                                    onChange={handleChange} 
                                                    error={errors.first_name}
                                                />
                                            </Item>
                                            <Item>
                                                <Input type="text" 
                                                    placeholder="Last name" 
                                                    name="last_name" 
                                                    value={values.last_name} 
                                                    onChange={handleChange} 
                                                    error={errors.last_name}
                                                />
                                            </Item>
                                            <Item>
                                                <Input type="text"
                                                    placeholder="Zip"
                                                    name="zip"
                                                    value={values.zip}
                                                    onChange={handleChange}
                                                    error={errors.zip}
                                                />              
                                            </Item>     
                                            <Errors>
                                                <>
                                                    {(errors.card_no || 
                                                    errors.expiration ||
                                                    errors.cvv ||
                                                    errors.first_name || 
                                                    errors.last_name ||
                                                    errors.zip) && 
                                                        <Error>Invalid or missing fields. Please review.</Error>
                                                    }
                                                </>                
                                            </Errors>  
                                            <Item>
                                                <PrimaryButton type="button" onClick={() => handleNext()}>Next</PrimaryButton>  
                                            </Item>
                                        </>
                                    ) : (
                                        <>
                                            <Item>
                                                <Input type="text"
                                                    placeholder="Address" 
                                                    name="address"
                                                    value={values.address}
                                                    onChange={handleChange}
                                                    error={errors.address}
                                                />
                                            </Item>
                                            <Item>
                                                <Input type="text"
                                                    placeholder="Country" 
                                                    name="country"
                                                    value={values.country}
                                                    onChange={handleChange}
                                                    error={errors.country}
                                                />
                                            </Item>
                                            <Item>
                                                <Input type="text"
                                                    placeholder="State" 
                                                    name="state"
                                                    value={values.state}
                                                    onChange={handleChange}
                                                    error={errors.state}
                                                />
                                                <Input type="text"
                                                    placeholder="City" 
                                                    name="city"
                                                    value={values.city}
                                                    onChange={handleChange}
                                                    error={errors.city}
                                                />
                                            </Item>
                                            <Item>
                                                <Input type="text"
                                                    placeholder="Email" 
                                                    name="email"
                                                    value={values.email}
                                                    onChange={handleChange}
                                                    error={errors.email}
                                                />
                                            </Item>
                                            <Item>
                                                <Input type="text"
                                                    placeholder="Phone" 
                                                    name="phone_no"
                                                    value={values.phone_no}
                                                    onChange={handleChange}
                                                    error={errors.phone_no}
                                                />
                                            </Item>

                                            <HiddenInput 
                                                type="number"
                                                name="amount"
                                                value={amount}
                                            />  
                                            <HiddenInput    
                                                type="text"
                                                name="customId"
                                                value="#customerId"
                                            />

                                            <Errors>
                                                <>
                                                    {(errors.address || 
                                                    errors.country ||
                                                    errors.state ||
                                                    errors.city || 
                                                    errors.email ||
                                                    errors.phone_no) && 
                                                        <Error>Invalid or missing fields. Please review.</Error>
                                                    }
                                                </>                
                                            </Errors>           
                                            <Item>
                                                <>
                                                    {paymentAllowed ? (
                                                        <PrimaryButton type="submit">Pay</PrimaryButton>
                                                    ) : (
                                                        <>
                                                        <PrimaryButton type="button" onClick={() => setSectionToShow(0)}>Prev</PrimaryButton>
                                                        <PrimaryButton type="button" onClick={() => handleToPayment()}>Next</PrimaryButton>
                                                        </>
                                                    )}
                                                </>
                                            </Item>
                                        </>
                                    )}
                                </>
                            </Form>
                        </FormBody>                        
                    )}
                </>
            </CustomApp>
        );
    }

    window.ReactDOM.render(
        <React.StrictMode>
            <App />
        </React.StrictMode>,
        document.querySelector('#root'),
    );
</script>